default_platform(:android)

platform :android do
  desc "Runs all tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build debug APK"
  lane :build_debug do
    gradle(
      task: "clean assembleDebug"
    )
  end

  desc "Increment version code and name with git commit"
    lane :increment_version_code do
      path = "#{ENV['CI_PROJECT_DIR']}/app/build.gradle"
      vc_regex = /versionCode\s+(\d+)/
      vn_regex = /versionName\s+"(\d+\.\d+\.\d+)"/

      # Read the build.gradle file
      gradle_file = File.read(path)

      # Extract and increment version code
      version_code = gradle_file.match(vc_regex)[1].to_i
      new_version_code = version_code + 1
      updated_gradle_file = gradle_file.sub(vc_regex, "versionCode #{new_version_code}")

      # Extract and increment version name
      version_name = gradle_file.match(vn_regex)[1]
      version_parts = version_name.split('.').map(&:to_i)
      version_parts[2] += 1  # Increment patch version
      new_version_name = version_parts.join('.')
      updated_gradle_file = updated_gradle_file.sub(vn_regex, "versionName \"#{new_version_name}\"")

      # Write changes back to build.gradle
      File.open(path, 'w') { |file| file.write(updated_gradle_file) }

      # Create git commit with version bump
      sh "git config --global user.email 'ci@example.com'"
      sh "git config --global user.name 'GitLab CI'"
      sh "git add #{path}"
      sh "git commit -m '[ci skip] Bump version code to #{new_version_code} and version name to #{new_version_name}'"
      sh "git push origin HEAD:#{ENV['CI_COMMIT_REF_NAME']}"

      # Set environment variables for later stages
      ENV['NEW_VERSION_CODE'] = new_version_code.to_s
      ENV['NEW_VERSION_NAME'] = new_version_name

      UI.success("Version code incremented to #{new_version_code}")
      UI.success("Version name updated to #{new_version_name}")
    end

  desc "Build release APK"
  lane :build_release do
    gradle(
      task: "clean assembleRelease",
      properties: {
        "android.injected.signing.store.file" => "#{ENV['CI_PROJECT_DIR']}/app/keystore.jks",
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }
    )
  end

  desc "Run lint check"
  lane :lint do
    gradle(task: "lint")
  end

  desc "Deploy to Play Store internal testing track"
  lane :deploy_internal do
    upload_to_play_store(
      track: 'internal',
        json_key: "#{ENV['CI_PROJECT_DIR']}/play-store-credentials.json",
        aab: ENV['AAB_PATH'] || lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
    )
  end
end
