default_platform(:android)

platform :android do
  desc "Runs all tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build debug APK"
  lane :build_debug do
    gradle(
      task: "clean assembleDebug"
    )
  end

  desc "Increment version code and name with git commit"
    lane :increment_version_code do
      # Define the exact path for build.gradle.kts
      path = "#{ENV['CI_PROJECT_DIR']}/app/build.gradle.kts"

      UI.message("Reading build.gradle.kts from: #{path}")

      unless File.exist?(path)
        UI.error("Could not find build.gradle.kts at: #{path}")
        UI.error("Current directory: #{Dir.pwd}")
        UI.error("Directory contents:")
        Dir.glob("**/*").each { |f| UI.error("- #{f}") }
        raise "build.gradle.kts not found"
      end

      # Kotlin DSL specific regex patterns
      # This assumes versions are in the android { defaultConfig { ... } } block
      android_block_regex = /android\s*\{[^}]*defaultConfig\s*\{([^}]*)\}/m
      vc_regex = /versionCode\s*=\s*(\d+)/
      vn_regex = /versionName\s*=\s*"(\d+\.\d+\.\d+)"/

      begin
        # Read the build.gradle.kts file
        gradle_file = File.read(path)
        UI.success("Successfully read build.gradle.kts file")

        # Find the defaultConfig block
        config_block = gradle_file.match(android_block_regex)
        unless config_block
          UI.error("Could not find android.defaultConfig block in build.gradle.kts")
          raise "Invalid build.gradle.kts structure"
        end

        # Extract version code and name
        version_code = gradle_file.match(vc_regex)[1].to_i
        version_name = gradle_file.match(vn_regex)[1]

        # Increment versions
        new_version_code = version_code + 1
        version_parts = version_name.split('.').map(&:to_i)
        version_parts[2] += 1  # Increment patch version
        new_version_name = version_parts.join('.')

        # Update the file content
        updated_gradle_file = gradle_file
          .sub(vc_regex, "versionCode = #{new_version_code}")
          .sub(vn_regex, "versionName = \"#{new_version_name}\"")

        # Write changes back to build.gradle.kts
        File.write(path, updated_gradle_file)
        UI.success("Successfully wrote updated build.gradle.kts file")

        # Create git commit with version bump
        sh "git config --global user.email 'ci@example.com'"
        sh "git config --global user.name 'GitLab CI'"
        sh "git add #{path}"
        sh "git commit -m '[ci skip] Bump version code to #{new_version_code} and version name to #{new_version_name}'"
        sh "git push origin HEAD:#{ENV['CI_COMMIT_REF_NAME']}"

        # Set environment variables for later stages
        ENV['NEW_VERSION_CODE'] = new_version_code.to_s
        ENV['NEW_VERSION_NAME'] = new_version_name

        UI.success("Version code incremented to #{new_version_code}")
        UI.success("Version name updated to #{new_version_name}")

      rescue => e
        UI.error("Error processing build.gradle.kts: #{e.message}")
        UI.error("Error backtrace: #{e.backtrace.join("\n")}")
        raise
      end
    end

  desc "Build release APK"
  lane :build_release do
    gradle(
      task: "clean assembleRelease",
      properties: {
        "android.injected.signing.store.file" => "#{ENV['CI_PROJECT_DIR']}/app/keystore.jks",
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }
    )
  end

  desc "Run lint check"
  lane :lint do
    gradle(task: "lint")
  end

  desc "Deploy to Play Store internal testing track"
  lane :deploy_internal do
    upload_to_play_store(
      track: 'internal',
        json_key: "#{ENV['CI_PROJECT_DIR']}/play-store-credentials.json",
        aab: ENV['AAB_PATH'] || lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
    )
  end
end
